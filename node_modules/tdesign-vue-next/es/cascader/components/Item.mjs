/**
 * tdesign v1.3.2
 * (c) 2023 tdesign
 * @license MIT
 */

import { isVNode, defineComponent, ref, computed, createVNode, mergeProps } from 'vue';
import { ChevronRightIcon } from 'tdesign-icons-vue-next';
import { getFullPathLabel } from '../core/helper.mjs';
import { getCascaderItemClass, getCascaderItemIconClass } from '../core/className.mjs';
import { Checkbox } from '../../checkbox/index.mjs';
import { Loading } from '../../loading/index.mjs';
import { usePrefixClass, useCommonClassName } from '../../hooks/useConfig.mjs';
import { useGlobalIcon } from '../../hooks/useGlobalIcon.mjs';
import useRipple from '../../hooks/useRipple.mjs';
import '../../_chunks/dep-7d1b4687.mjs';
import '../../_chunks/dep-64900979.mjs';
import '../../_chunks/dep-d782c768.mjs';
import '../../_chunks/dep-2cdc5ca3.mjs';
import '../../_chunks/dep-9bd90f12.mjs';
import '../../_chunks/dep-91824fdb.mjs';
import '../../_chunks/dep-755afb41.mjs';
import '../../_chunks/dep-ba9a2a55.mjs';
import '../../_chunks/dep-2f553c9a.mjs';
import '../../_chunks/dep-0210dcff.mjs';
import '../../_chunks/dep-384bac4f.mjs';
import '../../_chunks/dep-955385c7.mjs';
import '../../_chunks/dep-be13e22d.mjs';
import '../../_chunks/dep-420ddaf9.mjs';
import '../../_chunks/dep-040e82d9.mjs';
import '../../_chunks/dep-60b55191.mjs';
import '../../_chunks/dep-4c04d566.mjs';
import '../../_chunks/dep-4cba74ca.mjs';
import '../../_chunks/dep-be4991f3.mjs';
import '../../_chunks/dep-39d4a55c.mjs';
import '../../_chunks/dep-678ab3b6.mjs';
import '../../checkbox/checkbox.mjs';
import '../../_chunks/dep-4dcef6a1.mjs';
import '../../checkbox/props.mjs';
import '../../hooks/useVModel.mjs';
import '../../_chunks/dep-11e4059f.mjs';
import '../../_chunks/dep-7f75e8f1.mjs';
import '../../_chunks/dep-f5982c82.mjs';
import '../../_chunks/dep-f12730c4.mjs';
import '../../form/hooks.mjs';
import '../../hooks/tnode.mjs';
import '../../_chunks/dep-8c885278.mjs';
import '../../_chunks/dep-a0224e27.mjs';
import '../../_chunks/dep-7464e57e.mjs';
import '../../_chunks/dep-e150d7bf.mjs';
import '../../utils/render-tnode.mjs';
import '../../_chunks/dep-f88ad5fd.mjs';
import '../../checkbox/constants.mjs';
import '../../hooks/useKeepAnimation.mjs';
import '../../_chunks/dep-c3ece1cf.mjs';
import '../../_chunks/dep-373bac14.mjs';
import '../../_chunks/dep-2b16ff22.mjs';
import '../../_chunks/dep-c421aaa0.mjs';
import '../../_chunks/dep-b4198268.mjs';
import '../../_chunks/dep-7d088294.mjs';
import '../../_chunks/dep-0fd3d7a6.mjs';
import '../../_chunks/dep-19f33d8c.mjs';
import '../../_chunks/dep-3e46ef4c.mjs';
import '../../_chunks/dep-d1512a6b.mjs';
import '../../_chunks/dep-7a0a3872.mjs';
import '../../_common/js/global-config/default-config.mjs';
import '../../_common/js/global-config/locale/zh_CN.mjs';
import '../../_chunks/dep-72f65da7.mjs';
import '../../_chunks/dep-e461959c.mjs';
import '../../config-provider/useConfig.mjs';
import '../../_chunks/dep-501631b2.mjs';
import '../../_chunks/dep-ea2a51d2.mjs';
import '../../_chunks/dep-ea07b4f5.mjs';
import '../../config-provider/type.mjs';
import '../../utils/set-style.mjs';
import '../../checkbox/group.mjs';
import '../../_chunks/dep-c8a60dc2.mjs';
import '../../_chunks/dep-5eae49c8.mjs';
import '../../checkbox/checkbox-group-props.mjs';
import '../../hooks/slot.mjs';
import '../../_chunks/dep-9189b575.mjs';
import '../../utils/withInstall.mjs';
import './style/css.mjs';
import '../../checkbox/type.mjs';
import '../../loading/directive.mjs';
import '../../loading/plugin.mjs';
import '../../loading/loading.mjs';
import '../../loading/icon/gradient.mjs';
import '../../_common/js/loading/circle-adapter.mjs';
import '../../_common/js/utils/set-style.mjs';
import '../../_common/js/utils/helper.mjs';
import '../../_chunks/dep-22fdced0.mjs';
import '../../_chunks/dep-b08f13e9.mjs';
import '../../utils/dom.mjs';
import '../../utils/easing.mjs';
import '../../loading/props.mjs';
import '../../hooks/useTeleport.mjs';
import '../../loading/type.mjs';

function _isSlot(s) {
  return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !isVNode(s);
}
var props = {
  node: {
    type: Object,
    "default": function _default() {
      return {};
    }
  },
  cascaderContext: {
    type: Object
  },
  onChange: Function,
  onClick: Function,
  onMouseenter: Function
};
var Item = defineComponent({
  name: "TCascaderItem",
  props: props,
  setup: function setup(props2) {
    var liRef = ref();
    useRipple(liRef);
    var COMPONENT_NAME = usePrefixClass("cascader__item");
    var classPrefix = usePrefixClass();
    var _useGlobalIcon = useGlobalIcon({
        ChevronRightIcon: ChevronRightIcon
      }),
      ChevronRightIcon$1 = _useGlobalIcon.ChevronRightIcon;
    var _useCommonClassName = useCommonClassName(),
      STATUS = _useCommonClassName.STATUS,
      SIZE = _useCommonClassName.SIZE;
    var itemClass = computed(function () {
      return getCascaderItemClass(classPrefix.value, props2.node, SIZE.value, STATUS.value, props2.cascaderContext);
    });
    var iconClass = computed(function () {
      return getCascaderItemIconClass(classPrefix.value, props2.node, STATUS.value, props2.cascaderContext);
    });
    function RenderLabelInner(node, cascaderContext) {
      var inputVal = cascaderContext.inputVal;
      var labelText = inputVal ? getFullPathLabel(node) : node.label;
      if (inputVal) {
        var texts = labelText.split(inputVal);
        var doms = [];
        for (var index = 0; index < texts.length; index++) {
          doms.push(createVNode("span", {
            "key": index
          }, [texts[index]]));
          if (index === texts.length - 1) break;
          doms.push(createVNode("span", {
            "key": "".concat(index, "filter"),
            "class": "".concat(COMPONENT_NAME.value, "-label--filter")
          }, [inputVal]));
        }
        return doms;
      }
      return labelText;
    }
    function RenderLabelContent(node, cascaderContext) {
      var label = RenderLabelInner(node, cascaderContext);
      var labelCont = createVNode("span", {
        "title": cascaderContext.inputVal ? getFullPathLabel(node) : node.label,
        "class": ["".concat(COMPONENT_NAME.value, "-label"), "".concat(COMPONENT_NAME.value, "-label--ellipsis")],
        "role": "label"
      }, [label]);
      return labelCont;
    }
    function RenderCheckBox(node, cascaderContext) {
      var checkProps = cascaderContext.checkProps,
        value = cascaderContext.value,
        max = cascaderContext.max,
        inputVal = cascaderContext.inputVal;
      var label = RenderLabelInner(node, cascaderContext);
      return createVNode(Checkbox, mergeProps({
        "checked": node.checked,
        "indeterminate": node.indeterminate,
        "disabled": node.isDisabled() || value.length >= max && max !== 0,
        "name": String(node.value),
        "stopLabelTrigger": !!node.children,
        "title": inputVal ? getFullPathLabel(node) : node.label,
        "onChange": function onChange() {
          props2.onChange();
        }
      }, checkProps), _isSlot(label) ? label : {
        "default": function _default() {
          return [label];
        }
      });
    }
    return function () {
      var cascaderContext = props2.cascaderContext,
        node = props2.node;
      return createVNode("li", {
        "ref": liRef,
        "class": itemClass.value,
        "onClick": function onClick(e) {
          e.stopPropagation();
          props2.onClick();
        },
        "onMouseenter": function onMouseenter(e) {
          e.stopPropagation();
          props2.onMouseenter();
        }
      }, [cascaderContext.multiple ? RenderCheckBox(node, cascaderContext) : RenderLabelContent(node, cascaderContext), node.children && (node.loading ? createVNode(Loading, {
        "class": iconClass.value,
        "size": "small"
      }, null) : createVNode(ChevronRightIcon$1, {
        "class": iconClass.value
      }, null))]);
    };
  }
});

export { Item as default };
//# sourceMappingURL=Item.mjs.map
