/**
 * tdesign v1.3.2
 * (c) 2023 tdesign
 * @license MIT
 */

import { ref, getCurrentInstance, provide } from 'vue';
import { dragInjectKey } from '../constants.mjs';
import '../../hooks/useConfig.mjs';
import '../../config-provider/useConfig.mjs';
import '../../_chunks/dep-420ddaf9.mjs';
import '../../_chunks/dep-64900979.mjs';
import '../../_chunks/dep-d782c768.mjs';
import '../../_chunks/dep-2cdc5ca3.mjs';
import '../../_chunks/dep-91824fdb.mjs';
import '../../_chunks/dep-501631b2.mjs';
import '../../_chunks/dep-ea2a51d2.mjs';
import '../../_chunks/dep-373bac14.mjs';
import '../../_chunks/dep-2b16ff22.mjs';
import '../../_chunks/dep-be13e22d.mjs';
import '../../_chunks/dep-040e82d9.mjs';
import '../../_chunks/dep-c421aaa0.mjs';
import '../../_chunks/dep-b4198268.mjs';
import '../../_chunks/dep-7d088294.mjs';
import '../../_chunks/dep-60b55191.mjs';
import '../../_chunks/dep-9bd90f12.mjs';
import '../../_chunks/dep-755afb41.mjs';
import '../../_chunks/dep-4c04d566.mjs';
import '../../_chunks/dep-0210dcff.mjs';
import '../../_chunks/dep-384bac4f.mjs';
import '../../_chunks/dep-955385c7.mjs';
import '../../_chunks/dep-0fd3d7a6.mjs';
import '../../_chunks/dep-4cba74ca.mjs';
import '../../_chunks/dep-2f553c9a.mjs';
import '../../_chunks/dep-ea07b4f5.mjs';
import '../../_chunks/dep-f88ad5fd.mjs';
import '../../_chunks/dep-c3ece1cf.mjs';
import '../../_chunks/dep-19f33d8c.mjs';
import '../../_chunks/dep-3e46ef4c.mjs';
import '../../_chunks/dep-d1512a6b.mjs';
import '../../_chunks/dep-7a0a3872.mjs';
import '../../_common/js/global-config/default-config.mjs';
import '../../_common/js/global-config/locale/zh_CN.mjs';
import '../../_chunks/dep-72f65da7.mjs';
import '../../_chunks/dep-e461959c.mjs';
import '../../config-provider/type.mjs';

function useOnDrag(treeStore) {
  var dragNode = ref();
  var _getCurrentInstance = getCurrentInstance(),
    emit = _getCurrentInstance.emit;
  var onDragStart = function onDragStart(context) {
    dragNode.value = context.node;
    emit === null || emit === void 0 ? void 0 : emit("dragStart", context);
  };
  var onDragEnd = function onDragEnd(context) {
    dragNode.value = context.node;
    emit === null || emit === void 0 ? void 0 : emit("dragEnd", context);
  };
  var onDragOver = function onDragOver(context) {
    emit === null || emit === void 0 ? void 0 : emit("dragOver", context);
  };
  var onDragLeave = function onDragLeave(context) {
    emit === null || emit === void 0 ? void 0 : emit("dragLeave", context);
  };
  var onDrop = function onDrop(context) {
    var node = context.node,
      dropPosition = context.dropPosition;
    if (node.value === dragNode.value.value || node.getParents().some(function (_node) {
      return _node.value === dragNode.value.value;
    })) return;
    var nodes = treeStore.value.getNodes();
    nodes.some(function (_node, _index) {
      if (_node.value === node.value) {
        if (dropPosition === 0) {
          dragNode.value.appendTo(treeStore.value, _node);
        } else if (dropPosition < 0) {
          node.insertBefore(dragNode.value);
        } else {
          node.insertAfter(dragNode.value);
        }
        return true;
      }
      return false;
    });
    emit === null || emit === void 0 ? void 0 : emit("drop", context);
  };
  provide(dragInjectKey, {
    onDragStart: onDragStart,
    onDragEnd: onDragEnd,
    onDragOver: onDragOver,
    onDragLeave: onDragLeave,
    onDrop: onDrop
  });
}

export { useOnDrag as default };
//# sourceMappingURL=useOnDrag.mjs.map
