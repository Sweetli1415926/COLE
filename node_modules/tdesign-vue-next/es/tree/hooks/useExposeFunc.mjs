/**
 * tdesign v1.3.2
 * (c) 2023 tdesign
 * @license MIT
 */

import { u as upperFirst_1 } from '../../_chunks/dep-a0224e27.mjs';
import { getNode } from '../util.mjs';
import { i as isArray_1 } from '../../_chunks/dep-755afb41.mjs';
import '../../_chunks/dep-64900979.mjs';
import '../../_chunks/dep-7464e57e.mjs';
import '../../_chunks/dep-e150d7bf.mjs';
import '../../_chunks/dep-f5982c82.mjs';
import '../../_chunks/dep-d782c768.mjs';
import '../../_chunks/dep-2cdc5ca3.mjs';
import '../../_chunks/dep-4c04d566.mjs';
import '../../_chunks/dep-f12730c4.mjs';
import '../../_chunks/dep-9bd90f12.mjs';
import '../../_chunks/dep-678ab3b6.mjs';
import 'vue';
import '../../_chunks/dep-aa230c37.mjs';
import '../../_chunks/dep-9a005c22.mjs';
import '../../_chunks/dep-2b16ff22.mjs';
import '../../_chunks/dep-be13e22d.mjs';
import '../../_chunks/dep-420ddaf9.mjs';
import '../../_chunks/dep-91824fdb.mjs';
import '../../_chunks/dep-040e82d9.mjs';
import '../../_chunks/dep-c421aaa0.mjs';
import '../../_chunks/dep-255f2bfd.mjs';
import '../../_chunks/dep-b4198268.mjs';
import '../../_chunks/dep-7d088294.mjs';
import '../../_chunks/dep-0fd3d7a6.mjs';
import '../../_chunks/dep-60b55191.mjs';
import '../../_chunks/dep-384bac4f.mjs';
import '../../_chunks/dep-77157fb1.mjs';
import '../../_chunks/dep-ea07b4f5.mjs';
import '../../_chunks/dep-3e46ef4c.mjs';
import '../../_chunks/dep-f88ad5fd.mjs';
import '../../_chunks/dep-7d1b4687.mjs';

function useExposeFunc(treeStore, expose) {
  var setItem = function setItem(value, options) {
    var node = treeStore.value.getNode(value);
    var spec = options;
    var keys = Object.keys(spec);
    if (node && spec) {
      ["expanded", "actived", "checked"].forEach(function (name) {
        if (keys.includes(name)) {
          node["set".concat(upperFirst_1(name))](spec[name], {
            directly: true
          });
        }
      });
    }
  };
  var getItem = function getItem(value) {
    var node = treeStore.value.getNode(value);
    return node === null || node === void 0 ? void 0 : node.getModel();
  };
  var getItems = function getItems(value) {
    var nodes = treeStore.value.getNodes(value);
    return nodes.map(function (node) {
      return node.getModel();
    });
  };
  var appendTo = function appendTo(para, item) {
    var list = [];
    if (isArray_1(item)) {
      list = item;
    } else {
      list = [item];
    }
    list.forEach(function (item2) {
      var val = (item2 === null || item2 === void 0 ? void 0 : item2.value) || "";
      var node = getNode(treeStore.value, val);
      if (node) {
        treeStore.value.appendNodes(para, node);
      } else {
        treeStore.value.appendNodes(para, item2);
      }
    });
  };
  var insertBefore = function insertBefore(value, item) {
    var val = (item === null || item === void 0 ? void 0 : item.value) || "";
    var node = getNode(treeStore.value, val);
    if (node) {
      treeStore.value.insertBefore(value, node);
    } else {
      treeStore.value.insertBefore(value, item);
    }
  };
  var insertAfter = function insertAfter(value, item) {
    var val = (item === null || item === void 0 ? void 0 : item.value) || "";
    var node = getNode(treeStore.value, val);
    if (node) {
      treeStore.value.insertAfter(value, node);
    } else {
      treeStore.value.insertAfter(value, item);
    }
  };
  var remove = function remove(value) {
    return treeStore.value.remove(value);
  };
  var getIndex = function getIndex(value) {
    return treeStore.value.getNodeIndex(value);
  };
  var getParent = function getParent(value) {
    var node = treeStore.value.getParent(value);
    return node === null || node === void 0 ? void 0 : node.getModel();
  };
  var getParents = function getParents(value) {
    var nodes = treeStore.value.getParents(value);
    return nodes.map(function (node) {
      return node.getModel();
    });
  };
  var getPath = function getPath(value) {
    var node = treeStore.value.getNode(value);
    var pathNodes = [];
    if (node) {
      pathNodes = node.getPath().map(function (node2) {
        return node2.getModel();
      });
    }
    return pathNodes;
  };
  expose({
    setItem: setItem,
    getItem: getItem,
    getItems: getItems,
    appendTo: appendTo,
    insertBefore: insertBefore,
    insertAfter: insertAfter,
    remove: remove,
    getIndex: getIndex,
    getParent: getParent,
    getParents: getParents,
    getPath: getPath
  });
}

export { useExposeFunc as default };
//# sourceMappingURL=useExposeFunc.mjs.map
