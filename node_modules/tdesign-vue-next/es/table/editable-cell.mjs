/**
 * tdesign v1.3.2
 * (c) 2023 tdesign
 * @license MIT
 */

import { _ as _slicedToArray } from '../_chunks/dep-4dcef6a1.mjs';
import { _ as _defineProperty } from '../_chunks/dep-678ab3b6.mjs';
import { defineComponent, toRefs, ref, computed, onMounted, watch, createVNode, mergeProps } from 'vue';
import { g as get_1 } from '../_chunks/dep-1e6b7508.mjs';
import { s as set_1 } from '../_chunks/dep-41f130d9.mjs';
import { i as isFunction_1 } from '../_chunks/dep-420ddaf9.mjs';
import { Edit1Icon } from 'tdesign-icons-vue-next';
import { useGlobalIcon } from '../hooks/useGlobalIcon.mjs';
import { renderCell } from './tr.mjs';
import { validate } from '../form/form-model.mjs';
import '../_common/js/log/index.mjs';
import { on, off } from '../utils/dom.mjs';
import { i as isObject_1 } from '../_chunks/dep-91824fdb.mjs';
import { usePrefixClass } from '../hooks/useConfig.mjs';
import log from '../_common/js/log/log.mjs';
import '../_chunks/dep-39d4a55c.mjs';
import '../_chunks/dep-2cdc5ca3.mjs';
import '../_chunks/dep-64900979.mjs';
import '../_chunks/dep-9a005c22.mjs';
import '../_chunks/dep-755afb41.mjs';
import '../_chunks/dep-4c04d566.mjs';
import '../_chunks/dep-f12730c4.mjs';
import '../_chunks/dep-d782c768.mjs';
import '../_chunks/dep-9bd90f12.mjs';
import '../_chunks/dep-2b16ff22.mjs';
import '../_chunks/dep-be13e22d.mjs';
import '../_chunks/dep-040e82d9.mjs';
import '../_chunks/dep-c421aaa0.mjs';
import '../_chunks/dep-f5982c82.mjs';
import '../_chunks/dep-255f2bfd.mjs';
import '../_chunks/dep-b4198268.mjs';
import '../_chunks/dep-7d088294.mjs';
import '../_chunks/dep-0fd3d7a6.mjs';
import '../config-provider/useConfig.mjs';
import '../_chunks/dep-501631b2.mjs';
import '../_chunks/dep-ea2a51d2.mjs';
import '../_chunks/dep-373bac14.mjs';
import '../_chunks/dep-60b55191.mjs';
import '../_chunks/dep-0210dcff.mjs';
import '../_chunks/dep-384bac4f.mjs';
import '../_chunks/dep-955385c7.mjs';
import '../_chunks/dep-4cba74ca.mjs';
import '../_chunks/dep-2f553c9a.mjs';
import '../_chunks/dep-ea07b4f5.mjs';
import '../_chunks/dep-f88ad5fd.mjs';
import '../_chunks/dep-c3ece1cf.mjs';
import '../_chunks/dep-19f33d8c.mjs';
import '../_chunks/dep-3e46ef4c.mjs';
import '../_chunks/dep-d1512a6b.mjs';
import '../_chunks/dep-7a0a3872.mjs';
import '../_common/js/global-config/default-config.mjs';
import '../_common/js/global-config/locale/zh_CN.mjs';
import '../_chunks/dep-72f65da7.mjs';
import '../_chunks/dep-e461959c.mjs';
import '../config-provider/type.mjs';
import '../_chunks/dep-a0224e27.mjs';
import '../_chunks/dep-7464e57e.mjs';
import '../_chunks/dep-e150d7bf.mjs';
import '../_chunks/dep-aa230c37.mjs';
import '../_chunks/dep-77157fb1.mjs';
import './utils.mjs';
import './hooks/useFixed.mjs';
import '../_chunks/dep-d3c22e86.mjs';
import '../_chunks/dep-5d480929.mjs';
import '../_common/js/utils/getScrollbarWidth.mjs';
import '../_common/js/utils/helper.mjs';
import '../_chunks/dep-be4991f3.mjs';
import '../_chunks/dep-22fdced0.mjs';
import '../_chunks/dep-b08f13e9.mjs';
import '../_chunks/dep-9189b575.mjs';
import '../_chunks/dep-7d1b4687.mjs';
import '../utils/easing.mjs';
import './hooks/useClassName.mjs';
import './ellipsis.mjs';
import '../utils/render-tnode.mjs';
import '../_chunks/dep-ba9a2a55.mjs';
import '../_chunks/dep-8c885278.mjs';
import '../_chunks/dep-7f75e8f1.mjs';
import '../_chunks/dep-11e4059f.mjs';
import '../tooltip/index.mjs';
import '../tooltip/tooltip.mjs';
import '../_chunks/dep-b5e127e2.mjs';
import '../tooltip/props.mjs';
import '../popup/props.mjs';
import '../popup/index.mjs';
import '../popup/popup.mjs';
import '@popperjs/core';
import '../hooks/index.mjs';
import '../hooks/icon.mjs';
import '../hooks/slot.mjs';
import '../hooks/tnode.mjs';
import '../hooks/useCommonClassName.mjs';
import '../hooks/useDefaultValue.mjs';
import '../hooks/useDestroyOnClose.mjs';
import '../hooks/useKeepAnimation.mjs';
import '../hooks/useRipple.mjs';
import '../utils/set-style.mjs';
import '../hooks/useVirtualScroll.mjs';
import '../hooks/useVModel.mjs';
import '../_common/js/utils/set-style.mjs';
import '../popup/container.mjs';
import '../hooks/useResizeObserver.mjs';
import '../utils/withInstall.mjs';
import './style/css.mjs';
import '../popup/type.mjs';
import '../tooltip/util.mjs';
import '../tooltip/type.mjs';
import './base-table-props.mjs';
import './hooks/useLazyLoad.mjs';
import '../_common/js/utils/observe.mjs';
import './hooks/useRowspanAndColspan.mjs';
import '../_chunks/dep-894cfb75.mjs';
import '../_chunks/dep-273d18b0.mjs';
import '../utils/helper.mjs';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var EditableCell = defineComponent({
  name: "TableEditableCell",
  props: {
    row: Object,
    rowIndex: Number,
    col: Object,
    colIndex: Number,
    oldCell: [Function, String],
    tableBaseClass: Object,
    cellEmptyContent: [Function, String],
    editable: {
      type: Boolean,
      "default": void 0
    },
    readonly: {
      type: Boolean
    },
    errors: {
      type: Array,
      "default": void 0
    },
    onChange: Function,
    onValidate: Function,
    onRuleChange: Function,
    onEditableChange: Function
  },
  setup: function setup(props, context) {
    var _props$col$edit;
    var _toRefs = toRefs(props),
      row = _toRefs.row,
      col = _toRefs.col;
    var tableEditableCellRef = ref(null);
    var isEdit = ref(((_props$col$edit = props.col.edit) === null || _props$col$edit === void 0 ? void 0 : _props$col$edit.defaultEditable) || false);
    var editValue = ref();
    var errorList = ref();
    var classPrefix = usePrefixClass();
    var _useGlobalIcon = useGlobalIcon({
        Edit1Icon: Edit1Icon
      }),
      Edit1Icon$1 = _useGlobalIcon.Edit1Icon;
    var editOnListeners = computed(function () {
      var _col$value$edit, _col$value$edit$on;
      return ((_col$value$edit = col.value.edit) === null || _col$value$edit === void 0 ? void 0 : (_col$value$edit$on = _col$value$edit.on) === null || _col$value$edit$on === void 0 ? void 0 : _col$value$edit$on.call(_col$value$edit, _objectSpread(_objectSpread({}, cellParams.value), {}, {
        editedRow: currentRow.value
      }))) || {};
    });
    var cellParams = computed(function () {
      return {
        rowIndex: props.rowIndex,
        colIndex: props.colIndex,
        col: props.col,
        row: props.row
      };
    });
    var currentRow = computed(function () {
      var newRow = _objectSpread({}, row.value);
      set_1(newRow, col.value.colKey, editValue.value);
      return newRow;
    });
    var cellNode = computed(function () {
      var node = renderCell({
        row: currentRow.value,
        col: _objectSpread(_objectSpread({}, col.value), {}, {
          cell: props.oldCell
        }),
        rowIndex: props.rowIndex,
        colIndex: props.colIndex
      }, context.slots, {
        cellEmptyContent: props.cellEmptyContent
      });
      return node;
    });
    var componentProps = computed(function () {
      var _edit$abortEditOnEven;
      var edit = col.value.edit;
      if (!edit) return {};
      var editProps = isFunction_1(edit.props) ? edit.props(_objectSpread(_objectSpread({}, cellParams.value), {}, {
        editedRow: currentRow.value
      })) : _objectSpread({}, edit.props);
      delete editProps.onChange;
      delete editProps.value;
      (_edit$abortEditOnEven = edit.abortEditOnEvent) === null || _edit$abortEditOnEven === void 0 ? void 0 : _edit$abortEditOnEven.forEach(function (item) {
        delete editProps[item];
      });
      return editProps;
    });
    var isAbortEditOnChange = computed(function () {
      var _edit$abortEditOnEven2;
      var edit = col.value.edit;
      if (!edit) return false;
      return Boolean((_edit$abortEditOnEven2 = edit.abortEditOnEvent) === null || _edit$abortEditOnEven2 === void 0 ? void 0 : _edit$abortEditOnEven2.includes("onChange"));
    });
    var validateEdit = function validateEdit(trigger) {
      return new Promise(function (resolve) {
        var params = {
          result: [_objectSpread(_objectSpread({}, cellParams.value), {}, {
            errorList: [],
            value: editValue.value
          })],
          trigger: trigger
        };
        var rules = isFunction_1(col.value.edit.rules) ? col.value.edit.rules(cellParams.value) : col.value.edit.rules;
        if (!col.value.edit || !rules || !rules.length) {
          var _props$onValidate;
          (_props$onValidate = props.onValidate) === null || _props$onValidate === void 0 ? void 0 : _props$onValidate.call(props, params);
          resolve(true);
          return;
        }
        validate(editValue.value, rules).then(function (result) {
          var _props$onValidate2;
          var list = result === null || result === void 0 ? void 0 : result.filter(function (t) {
            return !t.result;
          });
          params.result[0].errorList = list;
          (_props$onValidate2 = props.onValidate) === null || _props$onValidate2 === void 0 ? void 0 : _props$onValidate2.call(props, params);
          if (!list || !list.length) {
            errorList.value = [];
            resolve(true);
          } else {
            errorList.value = list;
            resolve(list);
          }
        });
      });
    };
    var isSame = function isSame(a, b) {
      if (isObject_1(a) && isObject_1(b)) {
        return JSON.stringify(a) === JSON.stringify(b);
      }
      return a === b;
    };
    var updateAndSaveAbort = function updateAndSaveAbort(outsideAbortEvent, eventName) {
      for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
        args[_key - 2] = arguments[_key];
      }
      validateEdit("self").then(function (result) {
        var _editOnListeners$valu, _editOnListeners$valu2;
        if (result !== true) return;
        var oldValue = get_1(row.value, col.value.colKey);
        if (!isSame(editValue.value, oldValue)) {
          editValue.value = oldValue;
          outsideAbortEvent === null || outsideAbortEvent === void 0 ? void 0 : outsideAbortEvent.apply(void 0, args);
        }
        (_editOnListeners$valu = (_editOnListeners$valu2 = editOnListeners.value)[eventName]) === null || _editOnListeners$valu === void 0 ? void 0 : _editOnListeners$valu.call(_editOnListeners$valu2, args[2]);
        var timer = setTimeout(function () {
          var _props$onEditableChan;
          isEdit.value = false;
          errorList.value = [];
          (_props$onEditableChan = props.onEditableChange) === null || _props$onEditableChan === void 0 ? void 0 : _props$onEditableChan.call(props, _objectSpread(_objectSpread({}, cellParams.value), {}, {
            value: editValue.value,
            editedRow: _objectSpread(_objectSpread({}, props.row), {}, _defineProperty({}, props.col.colKey, editValue.value)),
            validateEdit: validateEdit,
            isEdit: false
          }));
          clearTimeout(timer);
        }, 0);
      });
    };
    var listeners = computed(function () {
      var _edit$abortEditOnEven3;
      var edit = col.value.edit;
      var isCellEditable = props.editable === void 0;
      if (!isEdit.value || !isCellEditable) return;
      if (!(edit !== null && edit !== void 0 && (_edit$abortEditOnEven3 = edit.abortEditOnEvent) !== null && _edit$abortEditOnEven3 !== void 0 && _edit$abortEditOnEven3.length)) return {};
      var tListeners = {};
      var outsideAbortEvent = edit === null || edit === void 0 ? void 0 : edit.onEdited;
      edit.abortEditOnEvent.forEach(function (itemEvent) {
        if (itemEvent === "onChange") return;
        tListeners[itemEvent] = function () {
          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }
          updateAndSaveAbort.apply(void 0, [outsideAbortEvent, itemEvent, _objectSpread(_objectSpread({}, cellParams.value), {}, {
            trigger: itemEvent,
            newRowData: currentRow.value
          })].concat(args));
        };
      });
      return tListeners;
    });
    var onEditChange = function onEditChange(val) {
      var _props$onChange, _props$onRuleChange, _editOnListeners$valu3, _editOnListeners$valu4, _col$value$edit3;
      editValue.value = val;
      var params = _objectSpread(_objectSpread({}, cellParams.value), {}, {
        value: val,
        editedRow: _objectSpread(_objectSpread({}, props.row), {}, _defineProperty({}, props.col.colKey, val))
      });
      (_props$onChange = props.onChange) === null || _props$onChange === void 0 ? void 0 : _props$onChange.call(props, params);
      (_props$onRuleChange = props.onRuleChange) === null || _props$onRuleChange === void 0 ? void 0 : _props$onRuleChange.call(props, params);
      (_editOnListeners$valu3 = editOnListeners.value) === null || _editOnListeners$valu3 === void 0 ? void 0 : (_editOnListeners$valu4 = _editOnListeners$valu3.onChange) === null || _editOnListeners$valu4 === void 0 ? void 0 : _editOnListeners$valu4.call(_editOnListeners$valu3, params);
      var isCellEditable = props.editable === void 0;
      if (isCellEditable && isAbortEditOnChange.value) {
        var _col$value$edit2;
        var outsideAbortEvent = (_col$value$edit2 = col.value.edit) === null || _col$value$edit2 === void 0 ? void 0 : _col$value$edit2.onEdited;
        for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
          args[_key3 - 1] = arguments[_key3];
        }
        updateAndSaveAbort.apply(void 0, [outsideAbortEvent, "change", _objectSpread(_objectSpread({}, cellParams.value), {}, {
          trigger: "onChange",
          newRowData: currentRow.value
        })].concat(args));
      }
      if (((_col$value$edit3 = col.value.edit) === null || _col$value$edit3 === void 0 ? void 0 : _col$value$edit3.validateTrigger) === "change") {
        validateEdit("self");
      }
    };
    var documentClickHandler = function documentClickHandler(e) {
      var _e$composedPath;
      if (!col.value.edit || !col.value.edit.component) return;
      if (!isEdit.value) return;
      var path = ((_e$composedPath = e.composedPath) === null || _e$composedPath === void 0 ? void 0 : _e$composedPath.call(e)) || e.path || [];
      var node = path.find(function (node2) {
        var _node2$classList;
        return (_node2$classList = node2.classList) === null || _node2$classList === void 0 ? void 0 : _node2$classList.contains("".concat(classPrefix.value, "-popup__content"));
      });
      if (node) return;
      var outsideAbortEvent = col.value.edit.onEdited;
      updateAndSaveAbort(outsideAbortEvent, "", _objectSpread(_objectSpread({}, cellParams.value), {}, {
        trigger: "document",
        newRowData: currentRow.value
      }));
    };
    var enterEdit = function enterEdit() {
      var _props$onEditableChan2;
      (_props$onEditableChan2 = props.onEditableChange) === null || _props$onEditableChan2 === void 0 ? void 0 : _props$onEditableChan2.call(props, _objectSpread(_objectSpread({}, cellParams.value), {}, {
        value: editValue.value,
        editedRow: props.row,
        isEdit: true,
        validateEdit: validateEdit
      }));
    };
    var onCellClick = function onCellClick(e) {
      isEdit.value = true;
      enterEdit();
      e.stopPropagation();
    };
    onMounted(function () {
      var _props$col$edit2;
      if ((_props$col$edit2 = props.col.edit) !== null && _props$col$edit2 !== void 0 && _props$col$edit2.defaultEditable) {
        enterEdit();
      }
    });
    var cellValue = computed(function () {
      return get_1(row.value, col.value.colKey);
    });
    watch(cellValue, function (cellValue2) {
      editValue.value = cellValue2;
    }, {
      immediate: true
    });
    watch(isEdit, function (isEdit2) {
      var isCellEditable = props.editable === void 0;
      if (!col.value.edit || !col.value.edit.component || !isCellEditable) return;
      if (isEdit2) {
        on(document, "click", documentClickHandler);
      } else {
        off(document, "click", documentClickHandler);
      }
    }, {
      immediate: true
    });
    watch(function () {
      return [props.editable, props.row, props.col, props.rowIndex, props.colIndex];
    }, function (_ref) {
      var _ref2 = _slicedToArray(_ref, 1),
        editable = _ref2[0];
      if (editable === false) {
        editValue.value = cellValue.value;
      } else if (editable === true) {
        var _props$onRuleChange2;
        (_props$onRuleChange2 = props.onRuleChange) === null || _props$onRuleChange2 === void 0 ? void 0 : _props$onRuleChange2.call(props, _objectSpread(_objectSpread({}, cellParams.value), {}, {
          value: cellValue.value,
          editedRow: row.value
        }));
      }
    }, {
      immediate: true
    });
    watch(function () {
      return props.errors;
    }, function (errors) {
      errorList.value = errors;
    });
    return function () {
      var _col$value$edit5, _errorList$value, _errorList$value$, _col$value$edit6, _col$value$edit6$abor, _errorList$value2, _errorList$value2$;
      if (props.readonly) {
        return cellNode.value;
      }
      if (props.editable === void 0 && !isEdit.value || props.editable === false) {
        var _col$value$edit4;
        return createVNode("div", {
          "class": props.tableBaseClass.cellEditable,
          "onClick": onCellClick
        }, [cellNode.value, ((_col$value$edit4 = col.value.edit) === null || _col$value$edit4 === void 0 ? void 0 : _col$value$edit4.showEditIcon) !== false && createVNode(Edit1Icon$1, null, null)]);
      }
      var Component = (_col$value$edit5 = col.value.edit) === null || _col$value$edit5 === void 0 ? void 0 : _col$value$edit5.component;
      if (!Component) {
        log.error("Table", "edit.component is required.");
        return null;
      }
      var errorMessage = (_errorList$value = errorList.value) === null || _errorList$value === void 0 ? void 0 : (_errorList$value$ = _errorList$value[0]) === null || _errorList$value$ === void 0 ? void 0 : _errorList$value$.message;
      var tmpEditOnListeners = _objectSpread({}, editOnListeners.value);
      delete tmpEditOnListeners.onChange;
      if ((_col$value$edit6 = col.value.edit) !== null && _col$value$edit6 !== void 0 && (_col$value$edit6$abor = _col$value$edit6.abortEditOnEvent) !== null && _col$value$edit6$abor !== void 0 && _col$value$edit6$abor.length) {
        col.value.edit.abortEditOnEvent.forEach(function (onEventName) {
          if (tmpEditOnListeners[onEventName]) {
            delete tmpEditOnListeners[onEventName];
          }
        });
      }
      return createVNode("div", {
        "class": props.tableBaseClass.cellEditWrap,
        "onClick": function onClick(e) {
          e.stopPropagation();
        },
        "ref": "tableEditableCellRef"
      }, [createVNode(Component, mergeProps({
        "status": errorMessage ? ((_errorList$value2 = errorList.value) === null || _errorList$value2 === void 0 ? void 0 : (_errorList$value2$ = _errorList$value2[0]) === null || _errorList$value2$ === void 0 ? void 0 : _errorList$value2$.type) || "error" : void 0,
        "tips": errorMessage
      }, componentProps.value, listeners.value, tmpEditOnListeners, {
        "value": editValue.value,
        "onChange": onEditChange
      }), null)]);
    };
  }
});

export { EditableCell as default };
//# sourceMappingURL=editable-cell.mjs.map
