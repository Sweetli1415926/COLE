/**
 * tdesign v1.3.2
 * (c) 2023 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-678ab3b6.mjs';
import { defineComponent, computed, watch, createVNode } from 'vue';
import { d as dayjs } from '../_chunks/dep-72f65da7.mjs';
import { usePrefixClass } from '../hooks/useConfig.mjs';
import { i as isFunction_1 } from '../_chunks/dep-420ddaf9.mjs';
import { useFormDisabled } from '../form/hooks.mjs';
import useSingle from './hooks/useSingle.mjs';
import { getDefaultFormat, formatDate, parseToDayjs, formatTime } from '../_common/js/date-picker/format.mjs';
import { subtractMonth, addMonth, extractTimeObj } from '../_common/js/date-picker/utils.mjs';
import datePickerProps from './props.mjs';
import { SelectInput } from '../select-input/index.mjs';
import TSinglePanel from './panel/SinglePanel.mjs';
import '../_chunks/dep-2cdc5ca3.mjs';
import '../_chunks/dep-64900979.mjs';
import '../config-provider/useConfig.mjs';
import '../_chunks/dep-501631b2.mjs';
import '../_chunks/dep-ea2a51d2.mjs';
import '../_chunks/dep-373bac14.mjs';
import '../_chunks/dep-2b16ff22.mjs';
import '../_chunks/dep-be13e22d.mjs';
import '../_chunks/dep-040e82d9.mjs';
import '../_chunks/dep-d782c768.mjs';
import '../_chunks/dep-91824fdb.mjs';
import '../_chunks/dep-c421aaa0.mjs';
import '../_chunks/dep-b4198268.mjs';
import '../_chunks/dep-7d088294.mjs';
import '../_chunks/dep-60b55191.mjs';
import '../_chunks/dep-9bd90f12.mjs';
import '../_chunks/dep-755afb41.mjs';
import '../_chunks/dep-4c04d566.mjs';
import '../_chunks/dep-0210dcff.mjs';
import '../_chunks/dep-384bac4f.mjs';
import '../_chunks/dep-955385c7.mjs';
import '../_chunks/dep-0fd3d7a6.mjs';
import '../_chunks/dep-4cba74ca.mjs';
import '../_chunks/dep-2f553c9a.mjs';
import '../_chunks/dep-ea07b4f5.mjs';
import '../_chunks/dep-f88ad5fd.mjs';
import '../_chunks/dep-c3ece1cf.mjs';
import '../_chunks/dep-19f33d8c.mjs';
import '../_chunks/dep-3e46ef4c.mjs';
import '../_chunks/dep-d1512a6b.mjs';
import '../_chunks/dep-7a0a3872.mjs';
import '../_common/js/global-config/default-config.mjs';
import '../_common/js/global-config/locale/zh_CN.mjs';
import '../_chunks/dep-e461959c.mjs';
import '../config-provider/type.mjs';
import 'tdesign-icons-vue-next';
import '../hooks/tnode.mjs';
import '../_chunks/dep-8c885278.mjs';
import '../_chunks/dep-f5982c82.mjs';
import '../_chunks/dep-f12730c4.mjs';
import '../_chunks/dep-a0224e27.mjs';
import '../_chunks/dep-7464e57e.mjs';
import '../_chunks/dep-e150d7bf.mjs';
import '../_chunks/dep-7f75e8f1.mjs';
import '../_chunks/dep-11e4059f.mjs';
import '../utils/render-tnode.mjs';
import '../_chunks/dep-ba9a2a55.mjs';
import '../hooks/useGlobalIcon.mjs';
import './hooks/useSingleValue.mjs';
import '../_chunks/dep-4dcef6a1.mjs';
import '../_chunks/dep-39d4a55c.mjs';
import '../hooks/useVModel.mjs';
import '../_common/js/log/index.mjs';
import '../_common/js/log/log.mjs';
import '../_chunks/dep-5901f702.mjs';
import '../_chunks/dep-5d480929.mjs';
import '../select-input/select-input.mjs';
import '../popup/index.mjs';
import '../popup/popup.mjs';
import '@popperjs/core';
import '../hooks/index.mjs';
import '../hooks/icon.mjs';
import '../hooks/slot.mjs';
import '../hooks/useCommonClassName.mjs';
import '../hooks/useDefaultValue.mjs';
import '../hooks/useDestroyOnClose.mjs';
import '../hooks/useKeepAnimation.mjs';
import '../hooks/useRipple.mjs';
import '../utils/set-style.mjs';
import '../hooks/useVirtualScroll.mjs';
import '../utils/dom.mjs';
import '../utils/easing.mjs';
import '../_common/js/utils/set-style.mjs';
import '../popup/container.mjs';
import '../_chunks/dep-be4991f3.mjs';
import '../popup/props.mjs';
import '../hooks/useResizeObserver.mjs';
import '../utils/withInstall.mjs';
import './style/css.mjs';
import '../popup/type.mjs';
import '../select-input/props.mjs';
import '../select-input/useSingle.mjs';
import '../_chunks/dep-22fdced0.mjs';
import '../_chunks/dep-aa230c37.mjs';
import '../_chunks/dep-9a005c22.mjs';
import '../_chunks/dep-255f2bfd.mjs';
import '../_chunks/dep-77157fb1.mjs';
import '../input/index.mjs';
import '../input/input.mjs';
import '../input/props.mjs';
import '../input/useInput.mjs';
import '../form/const.mjs';
import '../input/useLengthLimit.mjs';
import '../_common/js/utils/helper.mjs';
import '../_chunks/dep-b08f13e9.mjs';
import '../_chunks/dep-9189b575.mjs';
import '../_chunks/dep-7d1b4687.mjs';
import '../input/useInputEventHandler.mjs';
import '../input/useInputWidth.mjs';
import '../input/input-group.mjs';
import '../input/input-group-props.mjs';
import '../input/type.mjs';
import '../loading/index.mjs';
import '../loading/directive.mjs';
import '../loading/plugin.mjs';
import '../loading/loading.mjs';
import '../loading/icon/gradient.mjs';
import '../_common/js/loading/circle-adapter.mjs';
import '../loading/props.mjs';
import '../hooks/useTeleport.mjs';
import '../loading/type.mjs';
import '../select-input/useMultiple.mjs';
import '../tag-input/index.mjs';
import '../tag-input/tag-input.mjs';
import '../tag-input/props.mjs';
import '../tag-input/hooks/useTagScroll.mjs';
import '../tag-input/useTagList.mjs';
import '../tag/index.mjs';
import '../tag/tag.mjs';
import '../tag/props.mjs';
import '../tag/check-tag.mjs';
import '../tag/check-tag-props.mjs';
import '../tag/type.mjs';
import '../tag-input/hooks/useHover.mjs';
import '../tag-input/hooks/useDragSorter.mjs';
import '../tag-input/type.mjs';
import '../select-input/useOverlayInnerStyle.mjs';
import '../select-input/type.mjs';
import './panel/PanelContent.mjs';
import './base/Header.mjs';
import '../pagination/index.mjs';
import '../pagination/pagination.mjs';
import '../input-number/index.mjs';
import '../input-number/input-number.mjs';
import '../button/index.mjs';
import '../button/button.mjs';
import '../button/props.mjs';
import '../button/type.mjs';
import '../input-number/props.mjs';
import '../input-number/useInputNumber.mjs';
import '../_common/js/input-number/number.mjs';
import '../_chunks/dep-1b55023e.mjs';
import '../_common/js/input-number/large-number.mjs';
import '../input-number/type.mjs';
import '../select/index.mjs';
import '../select/select.mjs';
import '../_chunks/dep-d3c22e86.mjs';
import '../_chunks/dep-1e6b7508.mjs';
import '../_chunks/dep-c8a60dc2.mjs';
import '../_chunks/dep-5eae49c8.mjs';
import '../common-components/fake-arrow.mjs';
import '../select/select-panel.mjs';
import '../_chunks/dep-b5e127e2.mjs';
import '../select/option.mjs';
import '../select/option-props.mjs';
import '../checkbox/index.mjs';
import '../checkbox/checkbox.mjs';
import '../checkbox/props.mjs';
import '../checkbox/constants.mjs';
import '../checkbox/group.mjs';
import '../checkbox/checkbox-group-props.mjs';
import '../checkbox/type.mjs';
import '../select/helper.mjs';
import '../select/optionGroup.mjs';
import '../select/option-group-props.mjs';
import '../select/props.mjs';
import '../select/hooks/usePanelVirtualScroll.mjs';
import '../select/hooks/useSelectOptions.mjs';
import '../select/type.mjs';
import '../input-adornment/index.mjs';
import '../input-adornment/input-adornment.mjs';
import '../input-adornment/props.mjs';
import '../input-adornment/type.mjs';
import '../pagination/props.mjs';
import '../pagination/usePaginationClasses.mjs';
import '../pagination/useMoreAction.mjs';
import '../pagination/pagination-mini.mjs';
import '../pagination/pagination-mini-props.mjs';
import '../pagination/type.mjs';
import './base/Table.mjs';
import './base/Cell.mjs';
import '../time-picker/panel/time-picker-panel.mjs';
import '../_common/js/time-picker/const.mjs';
import '../time-picker/panel/props.mjs';
import '../_chunks/dep-273d18b0.mjs';
import '../time-picker/props.mjs';
import '../time-picker/panel/single-panel.mjs';
import '../_chunks/dep-5637f82f.mjs';
import '../_common/js/time-picker/utils.mjs';
import './panel/ExtraContent.mjs';
import './base/Footer.mjs';
import './hooks/useTableData.mjs';
import './hooks/useDisableDate.mjs';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var _DatePicker = defineComponent({
  name: "TDatePicker",
  props: _objectSpread({}, datePickerProps),
  setup: function setup(props2) {
    var COMPONENT_NAME = usePrefixClass("date-picker");
    var _useSingle = useSingle(props2),
      inputValue = _useSingle.inputValue,
      popupVisible = _useSingle.popupVisible,
      inputProps = _useSingle.inputProps,
      popupProps = _useSingle.popupProps,
      isHoverCell = _useSingle.isHoverCell,
      cacheValue = _useSingle.cacheValue,
      value = _useSingle.value,
      year = _useSingle.year,
      month = _useSingle.month,
      time = _useSingle.time,
      inputRef = _useSingle.inputRef,
      onChange = _useSingle.onChange;
    var disabled = useFormDisabled();
    var formatRef = computed(function () {
      return getDefaultFormat({
        mode: props2.mode,
        format: props2.format,
        valueType: props2.valueType,
        enableTimePicker: props2.enableTimePicker
      });
    });
    watch(popupVisible, function (visible) {
      cacheValue.value = formatDate(value.value, {
        format: formatRef.value.format
      });
      inputValue.value = formatDate(value.value, {
        format: formatRef.value.format
      });
      if (visible) {
        year.value = parseToDayjs(value.value, formatRef.value.format).year();
        month.value = parseToDayjs(value.value, formatRef.value.format).month();
        time.value = formatTime(value.value, formatRef.value.format, formatRef.value.timeFormat, props2.defaultTime);
      } else {
        isHoverCell.value = false;
      }
    });
    function onCellMouseEnter(date) {
      isHoverCell.value = true;
      inputValue.value = formatDate(date, {
        format: formatRef.value.format
      });
    }
    function onCellMouseLeave() {
      isHoverCell.value = false;
      inputValue.value = formatDate(cacheValue.value, {
        format: formatRef.value.format
      });
    }
    function onCellClick(date) {
      var _props2$onPick;
      isHoverCell.value = false;
      if (props2.mode === "date") {
        year.value = date.getFullYear();
        month.value = date.getMonth();
      }
      if (props2.enableTimePicker) {
        cacheValue.value = formatDate(date, {
          format: formatRef.value.format
        });
      } else {
        onChange === null || onChange === void 0 ? void 0 : onChange(formatDate(date, {
          format: formatRef.value.format,
          targetFormat: formatRef.value.valueType
        }), {
          dayjsValue: parseToDayjs(date, formatRef.value.format),
          trigger: "pick"
        });
        popupVisible.value = false;
      }
      (_props2$onPick = props2.onPick) === null || _props2$onPick === void 0 ? void 0 : _props2$onPick.call(props2, date);
    }
    function onJumperClick(_ref) {
      var trigger = _ref.trigger;
      var monthCountMap = {
        date: 1,
        week: 1,
        month: 12,
        quarter: 12,
        year: 120
      };
      var monthCount = monthCountMap[props2.mode] || 0;
      var current = new Date(year.value, month.value);
      var next = null;
      if (trigger === "prev") {
        next = subtractMonth(current, monthCount);
      } else if (trigger === "current") {
        next = new Date();
      } else if (trigger === "next") {
        next = addMonth(current, monthCount);
      }
      var nextYear = next.getFullYear();
      var nextMonth = next.getMonth();
      year.value = nextYear;
      month.value = nextMonth;
    }
    function onTimePickerChange(val) {
      var _props2$onPick2;
      time.value = val;
      var _extractTimeObj = extractTimeObj(val),
        hours = _extractTimeObj.hours,
        minutes = _extractTimeObj.minutes,
        seconds = _extractTimeObj.seconds,
        milliseconds = _extractTimeObj.milliseconds,
        meridiem = _extractTimeObj.meridiem;
      var nextHours = hours;
      if (/am/i.test(meridiem) && nextHours === 12) nextHours -= 12;
      if (/pm/i.test(meridiem) && nextHours < 12) nextHours += 12;
      var currentDate = !dayjs(inputValue.value, formatRef.value.format).isValid() ? dayjs() : dayjs(inputValue.value, formatRef.value.format);
      var nextDate = currentDate.hour(nextHours).minute(minutes).second(seconds).millisecond(milliseconds).toDate();
      inputValue.value = formatDate(nextDate, {
        format: formatRef.value.format
      });
      cacheValue.value = formatDate(nextDate, {
        format: formatRef.value.format
      });
      (_props2$onPick2 = props2.onPick) === null || _props2$onPick2 === void 0 ? void 0 : _props2$onPick2.call(props2, nextDate);
    }
    function onConfirmClick() {
      var nextValue = formatDate(inputValue.value, {
        format: formatRef.value.format
      });
      if (nextValue) {
        onChange === null || onChange === void 0 ? void 0 : onChange(formatDate(inputValue.value, {
          format: formatRef.value.format,
          targetFormat: formatRef.value.valueType
        }), {
          dayjsValue: parseToDayjs(inputValue.value, formatRef.value.format),
          trigger: "confirm"
        });
      } else {
        inputValue.value = formatDate(value.value, {
          format: formatRef.value.format
        });
      }
      popupVisible.value = false;
    }
    function onPresetClick(presetValue) {
      var presetVal = isFunction_1(presetValue) ? presetValue() : presetValue;
      onChange === null || onChange === void 0 ? void 0 : onChange(formatDate(presetVal, {
        format: formatRef.value.format,
        targetFormat: formatRef.value.valueType
      }), {
        dayjsValue: parseToDayjs(presetVal, formatRef.value.format),
        trigger: "preset"
      });
      popupVisible.value = false;
    }
    function onYearChange(nextYear) {
      year.value = nextYear;
    }
    function onMonthChange(nextMonth) {
      month.value = nextMonth;
    }
    var panelProps = computed(function () {
      return {
        value: cacheValue.value,
        year: year.value,
        month: month.value,
        format: formatRef.value.format,
        mode: props2.mode,
        presets: props2.presets,
        time: time.value,
        disableDate: props2.disableDate,
        firstDayOfWeek: props2.firstDayOfWeek,
        timePickerProps: props2.timePickerProps,
        enableTimePicker: props2.enableTimePicker,
        presetsPlacement: props2.presetsPlacement,
        popupVisible: popupVisible.value,
        onCellClick: onCellClick,
        onCellMouseEnter: onCellMouseEnter,
        onCellMouseLeave: onCellMouseLeave,
        onJumperClick: onJumperClick,
        onConfirmClick: onConfirmClick,
        onPresetClick: onPresetClick,
        onYearChange: onYearChange,
        onMonthChange: onMonthChange,
        onTimePickerChange: onTimePickerChange,
        onPanelClick: function onPanelClick() {
          var _inputRef$value, _inputRef$value$focus;
          return (_inputRef$value = inputRef.value) === null || _inputRef$value === void 0 ? void 0 : (_inputRef$value$focus = _inputRef$value.focus) === null || _inputRef$value$focus === void 0 ? void 0 : _inputRef$value$focus.call(_inputRef$value);
        }
      };
    });
    return function () {
      return createVNode("div", {
        "class": COMPONENT_NAME.value
      }, [createVNode(SelectInput, {
        "disabled": disabled.value,
        "value": inputValue.value,
        "status": props2.status,
        "tips": props2.tips,
        "clearable": props2.clearable,
        "popupProps": popupProps.value,
        "inputProps": inputProps.value,
        "popupVisible": popupVisible.value,
        "panel": function panel() {
          return createVNode(TSinglePanel, panelProps.value, null);
        }
      }, null)]);
    };
  }
});

export { _DatePicker as default };
//# sourceMappingURL=DatePicker.mjs.map
