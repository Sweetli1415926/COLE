/**
 * tdesign v1.3.2
 * (c) 2023 tdesign
 * @license MIT
 */

import { _ as _slicedToArray } from '../../_chunks/dep-4dcef6a1.mjs';
import { toRefs, computed, ref, watchEffect } from 'vue';
import useVModel from '../../hooks/useVModel.mjs';
import { i as isArray_1 } from '../../_chunks/dep-755afb41.mjs';
import { getDefaultFormat, isValidDate, initYearMonthTime, formatDate, formatTime } from '../../_common/js/date-picker/format.mjs';
import { extractTimeFormat } from '../../_common/js/date-picker/utils.mjs';
import '../../_chunks/dep-39d4a55c.mjs';
import '../../_chunks/dep-11e4059f.mjs';
import '../../_chunks/dep-64900979.mjs';
import '../../_chunks/dep-7f75e8f1.mjs';
import '../../_chunks/dep-f5982c82.mjs';
import '../../_chunks/dep-d782c768.mjs';
import '../../_chunks/dep-2cdc5ca3.mjs';
import '../../_chunks/dep-4c04d566.mjs';
import '../../_chunks/dep-f12730c4.mjs';
import '../../_chunks/dep-9bd90f12.mjs';
import '../../_chunks/dep-f88ad5fd.mjs';
import '../../_chunks/dep-72f65da7.mjs';
import '../../_common/js/log/index.mjs';
import '../../_common/js/log/log.mjs';
import '../../_chunks/dep-678ab3b6.mjs';
import '../../_chunks/dep-420ddaf9.mjs';
import '../../_chunks/dep-91824fdb.mjs';
import '../../_chunks/dep-5901f702.mjs';
import '../../_chunks/dep-5d480929.mjs';
import '../../_chunks/dep-e150d7bf.mjs';
import '../../_chunks/dep-7a0a3872.mjs';
import '../../_chunks/dep-c421aaa0.mjs';
import '../../_chunks/dep-4cba74ca.mjs';
import '../../_chunks/dep-040e82d9.mjs';
import '../../_chunks/dep-384bac4f.mjs';
import '../../_chunks/dep-0fd3d7a6.mjs';

var PARTIAL_MAP = {
  first: "start",
  second: "end"
};
function useRangeValue(props) {
  var _toRefs = toRefs(props),
    valueFromProps = _toRefs.value,
    modelValue = _toRefs.modelValue;
  var _useVModel = useVModel(valueFromProps, modelValue, props.defaultValue, props.onChange),
    _useVModel2 = _slicedToArray(_useVModel, 2),
    value = _useVModel2[0],
    onChange = _useVModel2[1];
  var formatRef = computed(function () {
    return getDefaultFormat({
      mode: props.mode,
      format: props.format,
      enableTimePicker: props.enableTimePicker
    });
  });
  if (props.enableTimePicker) {
    if (!extractTimeFormat(formatRef.value.format)) console.error("format: ".concat(formatRef.value.format, " \u4E0D\u89C4\u8303\uFF0C\u5305\u542B\u65F6\u95F4\u9009\u62E9\u5FC5\u987B\u8981\u6709\u65F6\u95F4\u683C\u5F0F\u5316 HH:mm:ss"));
  }
  if (!isArray_1(value.value)) {
    console.error("typeof value: ".concat(value.value, " must be Array!"));
  } else if (!isValidDate(value.value, formatRef.value.format)) {
    console.error("value: ".concat(value.value, " is invalid dateTime! Check whether the value is consistent with format: ").concat(formatRef.value.format));
  }
  var isFirstValueSelected = ref(false);
  var time = ref(initYearMonthTime({
    value: value.value,
    mode: props.mode,
    format: formatRef.value.format,
    timeFormat: formatRef.value.timeFormat
  }).time);
  var month = ref(initYearMonthTime({
    value: value.value,
    mode: props.mode,
    format: formatRef.value.format,
    enableTimePicker: props.enableTimePicker
  }).month);
  var year = ref(initYearMonthTime({
    value: value.value,
    mode: props.mode,
    format: formatRef.value.format
  }).year);
  var cacheValue = ref(formatDate(value.value, {
    format: formatRef.value.format
  }));
  watchEffect(function () {
    if (!value.value) {
      cacheValue.value = [];
      return;
    }
    if (!isValidDate(value.value, formatRef.value.format)) return;
    cacheValue.value = formatDate(value.value, {
      format: formatRef.value.format
    });
    time.value = formatTime(value.value, formatRef.value.format, formatRef.value.timeFormat, props.defaultTime);
  });
  return {
    year: year,
    month: month,
    value: value,
    time: time,
    isFirstValueSelected: isFirstValueSelected,
    cacheValue: cacheValue,
    onChange: onChange
  };
}

export { PARTIAL_MAP, useRangeValue as default };
//# sourceMappingURL=useRangeValue.mjs.map
