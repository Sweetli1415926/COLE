/**
 * tdesign v1.3.2
 * (c) 2023 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-678ab3b6.mjs';
import { _ as _toConsumableArray } from '../_chunks/dep-be4991f3.mjs';
import { _ as _slicedToArray } from '../_chunks/dep-4dcef6a1.mjs';
import { toRefs, ref, createVNode, mergeProps } from 'vue';
import { Tag } from '../tag/index.mjs';
import useVModel from '../hooks/useVModel.mjs';
import { usePrefixClass } from '../hooks/useConfig.mjs';
import { useTNodeJSX } from '../hooks/tnode.mjs';
import '../_chunks/dep-2cdc5ca3.mjs';
import '../_chunks/dep-39d4a55c.mjs';
import '../tag/tag.mjs';
import 'tdesign-icons-vue-next';
import '../tag/props.mjs';
import '../hooks/useGlobalIcon.mjs';
import '../config-provider/useConfig.mjs';
import '../_chunks/dep-420ddaf9.mjs';
import '../_chunks/dep-64900979.mjs';
import '../_chunks/dep-d782c768.mjs';
import '../_chunks/dep-91824fdb.mjs';
import '../_chunks/dep-501631b2.mjs';
import '../_chunks/dep-ea2a51d2.mjs';
import '../_chunks/dep-373bac14.mjs';
import '../_chunks/dep-2b16ff22.mjs';
import '../_chunks/dep-be13e22d.mjs';
import '../_chunks/dep-040e82d9.mjs';
import '../_chunks/dep-c421aaa0.mjs';
import '../_chunks/dep-b4198268.mjs';
import '../_chunks/dep-7d088294.mjs';
import '../_chunks/dep-60b55191.mjs';
import '../_chunks/dep-9bd90f12.mjs';
import '../_chunks/dep-755afb41.mjs';
import '../_chunks/dep-4c04d566.mjs';
import '../_chunks/dep-0210dcff.mjs';
import '../_chunks/dep-384bac4f.mjs';
import '../_chunks/dep-955385c7.mjs';
import '../_chunks/dep-0fd3d7a6.mjs';
import '../_chunks/dep-4cba74ca.mjs';
import '../_chunks/dep-2f553c9a.mjs';
import '../_chunks/dep-ea07b4f5.mjs';
import '../_chunks/dep-f88ad5fd.mjs';
import '../_chunks/dep-c3ece1cf.mjs';
import '../_chunks/dep-19f33d8c.mjs';
import '../_chunks/dep-3e46ef4c.mjs';
import '../_chunks/dep-d1512a6b.mjs';
import '../_chunks/dep-7a0a3872.mjs';
import '../_common/js/global-config/default-config.mjs';
import '../_common/js/global-config/locale/zh_CN.mjs';
import '../_chunks/dep-72f65da7.mjs';
import '../_chunks/dep-e461959c.mjs';
import '../config-provider/type.mjs';
import '../_chunks/dep-8c885278.mjs';
import '../_chunks/dep-f5982c82.mjs';
import '../_chunks/dep-f12730c4.mjs';
import '../_chunks/dep-a0224e27.mjs';
import '../_chunks/dep-7464e57e.mjs';
import '../_chunks/dep-e150d7bf.mjs';
import '../_chunks/dep-7f75e8f1.mjs';
import '../_chunks/dep-11e4059f.mjs';
import '../utils/render-tnode.mjs';
import '../_chunks/dep-ba9a2a55.mjs';
import '../tag/check-tag.mjs';
import '../tag/check-tag-props.mjs';
import '../utils/withInstall.mjs';
import './style/css.mjs';
import '../tag/type.mjs';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function useTagList(props) {
  var renderTNode = useTNodeJSX();
  var classPrefix = usePrefixClass();
  var _toRefs = toRefs(props),
    value = _toRefs.value,
    modelValue = _toRefs.modelValue,
    onRemove = _toRefs.onRemove,
    max = _toRefs.max,
    minCollapsedNum = _toRefs.minCollapsedNum,
    size = _toRefs.size,
    disabled = _toRefs.disabled,
    readonly = _toRefs.readonly,
    tagProps = _toRefs.tagProps,
    getDragProps = _toRefs.getDragProps;
  var _useVModel = useVModel(value, modelValue, props.defaultValue || [], props.onChange),
    _useVModel2 = _slicedToArray(_useVModel, 2),
    tagValue = _useVModel2[0],
    setTagValue = _useVModel2[1];
  var oldInputValue = ref();
  var _onClose = function onClose(p) {
    var _onRemove$value;
    var arr = _toConsumableArray(tagValue.value);
    arr.splice(p.index, 1);
    setTagValue(arr, _objectSpread({
      trigger: "tag-remove"
    }, p));
    (_onRemove$value = onRemove.value) === null || _onRemove$value === void 0 ? void 0 : _onRemove$value.call(onRemove, _objectSpread(_objectSpread({}, p), {}, {
      trigger: "tag-remove",
      value: arr
    }));
  };
  var clearAll = function clearAll(context) {
    setTagValue([], {
      trigger: "clear",
      e: context.e
    });
  };
  var onInnerEnter = function onInnerEnter(value2, context) {
    var _tagValue$value, _props$onEnter;
    var valueStr = value2 ? String(value2).trim() : "";
    var isLimitExceeded = max && ((_tagValue$value = tagValue.value) === null || _tagValue$value === void 0 ? void 0 : _tagValue$value.length) >= max.value;
    var newValue = tagValue.value;
    if (!isLimitExceeded && valueStr) {
      newValue = tagValue.value instanceof Array ? tagValue.value.concat(String(valueStr)) : [valueStr];
      setTagValue(newValue, {
        trigger: "enter",
        index: newValue.length - 1,
        item: valueStr,
        e: context.e
      });
    }
    props === null || props === void 0 ? void 0 : (_props$onEnter = props.onEnter) === null || _props$onEnter === void 0 ? void 0 : _props$onEnter.call(props, newValue, _objectSpread(_objectSpread({}, context), {}, {
      inputValue: value2
    }));
  };
  var onInputBackspaceKeyUp = function onInputBackspaceKeyUp(value2) {
    if (!tagValue.value || !tagValue.value.length) return;
    oldInputValue.value = value2;
  };
  var onInputBackspaceKeyDown = function onInputBackspaceKeyDown(value2, context) {
    var e = context.e;
    if (!tagValue.value || !tagValue.value.length || e.key === "Process") return;
    var isDelete = /(Backspace|NumpadDelete)/i.test(e.code) || /(Backspace|NumpadDelete)/i.test(e.key);
    if (!oldInputValue.value && isDelete) {
      var _onRemove$value2;
      var index = tagValue.value.length - 1;
      var item = tagValue.value[index];
      var trigger = "backspace";
      var newValue = tagValue.value.slice(0, -1);
      setTagValue(newValue, {
        e: e,
        index: index,
        item: item,
        trigger: trigger
      });
      (_onRemove$value2 = onRemove.value) === null || _onRemove$value2 === void 0 ? void 0 : _onRemove$value2.call(onRemove, {
        e: e,
        index: index,
        item: item,
        trigger: trigger,
        value: newValue
      });
    }
    oldInputValue.value = value2;
  };
  var renderLabel = function renderLabel(_ref) {
    var displayNode = _ref.displayNode,
      label = _ref.label;
    var newList = minCollapsedNum.value ? tagValue.value.slice(0, minCollapsedNum.value) : tagValue.value;
    var list = displayNode ? [displayNode] : newList === null || newList === void 0 ? void 0 : newList.map(function (item, index) {
      var _getDragProps$value;
      var tagContent = renderTNode("tag", {
        params: {
          value: item
        }
      });
      return createVNode(Tag, mergeProps({
        "key": "".concat(item).concat(index),
        "size": size.value,
        "disabled": disabled.value,
        "onClose": function onClose(context) {
          return _onClose({
            e: context.e,
            item: item,
            index: index
          });
        },
        "closable": !readonly.value && !disabled.value
      }, (_getDragProps$value = getDragProps.value) === null || _getDragProps$value === void 0 ? void 0 : _getDragProps$value.call(getDragProps, index, item), tagProps.value), {
        "default": function _default() {
          return [tagContent !== null && tagContent !== void 0 ? tagContent : item];
        }
      });
    });
    if (![null, void 0, ""].includes(label)) {
      list.unshift(createVNode("div", {
        "class": "".concat(classPrefix.value, "-tag-input__prefix"),
        "key": "label"
      }, [label]));
    }
    if (newList.length !== (tagValue.value || []).length) {
      var len = tagValue.value.length - newList.length;
      var more = renderTNode("collapsedItems", {
        params: {
          value: tagValue.value,
          count: tagValue.value.length - minCollapsedNum.value,
          collapsedTags: tagValue.value.slice(minCollapsedNum.value, tagValue.value.length),
          collapsedSelectedItems: tagValue.value.slice(minCollapsedNum.value, tagValue.value.length)
        }
      });
      list.push(more !== null && more !== void 0 ? more : createVNode(Tag, {
        "key": "more"
      }, {
        "default": function _default() {
          return ["+", len];
        }
      }));
    }
    return list;
  };
  return {
    tagValue: tagValue,
    clearAll: clearAll,
    onClose: _onClose,
    onInnerEnter: onInnerEnter,
    onInputBackspaceKeyUp: onInputBackspaceKeyUp,
    onInputBackspaceKeyDown: onInputBackspaceKeyDown,
    renderLabel: renderLabel
  };
}

export { useTagList as default };
//# sourceMappingURL=useTagList.mjs.map
